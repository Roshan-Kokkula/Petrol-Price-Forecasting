{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a945dd3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:41.792098Z",
     "iopub.status.busy": "2025-03-28T14:01:41.791619Z",
     "iopub.status.idle": "2025-03-28T14:01:44.802600Z",
     "shell.execute_reply": "2025-03-28T14:01:44.801407Z"
    },
    "papermill": {
     "duration": 3.017771,
     "end_time": "2025-03-28T14:01:44.804607",
     "exception": false,
     "start_time": "2025-03-28T14:01:41.786836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b9575bc8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.812301Z",
     "iopub.status.busy": "2025-03-28T14:01:44.811741Z",
     "iopub.status.idle": "2025-03-28T14:01:44.847548Z",
     "shell.execute_reply": "2025-03-28T14:01:44.846348Z"
    },
    "papermill": {
     "duration": 0.041715,
     "end_time": "2025-03-28T14:01:44.849754",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.808039",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Petrol (USD)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6/9/2003</td>\n",
       "      <td>74.59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6/16/2003</td>\n",
       "      <td>74.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6/23/2003</td>\n",
       "      <td>74.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6/30/2003</td>\n",
       "      <td>74.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7/7/2003</td>\n",
       "      <td>74.28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date  Petrol (USD)\n",
       "0   6/9/2003         74.59\n",
       "1  6/16/2003         74.47\n",
       "2  6/23/2003         74.42\n",
       "3  6/30/2003         74.35\n",
       "4   7/7/2003         74.28"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/petrol-price-forecasting/train_data.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "574ed2a6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.857658Z",
     "iopub.status.busy": "2025-03-28T14:01:44.857215Z",
     "iopub.status.idle": "2025-03-28T14:01:44.888326Z",
     "shell.execute_reply": "2025-03-28T14:01:44.886983Z"
    },
    "papermill": {
     "duration": 0.037036,
     "end_time": "2025-03-28T14:01:44.890085",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.853049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 813 entries, 0 to 812\n",
      "Data columns (total 2 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   Date          813 non-null    object \n",
      " 1   Petrol (USD)  811 non-null    float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 12.8+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c1fe8e49",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.898040Z",
     "iopub.status.busy": "2025-03-28T14:01:44.897646Z",
     "iopub.status.idle": "2025-03-28T14:01:44.915945Z",
     "shell.execute_reply": "2025-03-28T14:01:44.914727Z"
    },
    "papermill": {
     "duration": 0.024892,
     "end_time": "2025-03-28T14:01:44.918422",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.893530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 813 entries, 0 to 812\n",
      "Data columns (total 2 columns):\n",
      " #   Column        Non-Null Count  Dtype         \n",
      "---  ------        --------------  -----         \n",
      " 0   Date          813 non-null    datetime64[ns]\n",
      " 1   Petrol (USD)  811 non-null    float64       \n",
      "dtypes: datetime64[ns](1), float64(1)\n",
      "memory usage: 12.8 KB\n"
     ]
    }
   ],
   "source": [
    "df['Date'] = pd.to_datetime(df['Date'])\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d2285698",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.927414Z",
     "iopub.status.busy": "2025-03-28T14:01:44.926870Z",
     "iopub.status.idle": "2025-03-28T14:01:44.949140Z",
     "shell.execute_reply": "2025-03-28T14:01:44.948009Z"
    },
    "papermill": {
     "duration": 0.029106,
     "end_time": "2025-03-28T14:01:44.951073",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.921967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Petrol (USD)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>813</td>\n",
       "      <td>811.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2011-03-21 00:12:23.911439104</td>\n",
       "      <td>110.330481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2003-06-09 00:00:00</td>\n",
       "      <td>74.210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2007-04-30 00:00:00</td>\n",
       "      <td>94.525000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2011-03-21 00:00:00</td>\n",
       "      <td>112.420000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2015-02-09 00:00:00</td>\n",
       "      <td>128.560000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2018-12-31 00:00:00</td>\n",
       "      <td>189.510000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>19.241182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Date  Petrol (USD)\n",
       "count                            813    811.000000\n",
       "mean   2011-03-21 00:12:23.911439104    110.330481\n",
       "min              2003-06-09 00:00:00     74.210000\n",
       "25%              2007-04-30 00:00:00     94.525000\n",
       "50%              2011-03-21 00:00:00    112.420000\n",
       "75%              2015-02-09 00:00:00    128.560000\n",
       "max              2018-12-31 00:00:00    189.510000\n",
       "std                              NaN     19.241182"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ed31ec5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.959603Z",
     "iopub.status.busy": "2025-03-28T14:01:44.959177Z",
     "iopub.status.idle": "2025-03-28T14:01:44.967985Z",
     "shell.execute_reply": "2025-03-28T14:01:44.966755Z"
    },
    "papermill": {
     "duration": 0.014906,
     "end_time": "2025-03-28T14:01:44.969793",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.954887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date            0\n",
       "Petrol (USD)    2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_values = df.isnull().sum()\n",
    "null_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb20ff36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.978735Z",
     "iopub.status.busy": "2025-03-28T14:01:44.978380Z",
     "iopub.status.idle": "2025-03-28T14:01:44.989142Z",
     "shell.execute_reply": "2025-03-28T14:01:44.987959Z"
    },
    "papermill": {
     "duration": 0.017469,
     "end_time": "2025-03-28T14:01:44.991043",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.973574",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date            0\n",
       "Petrol (USD)    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace = True)\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "311ea3a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:44.999467Z",
     "iopub.status.busy": "2025-03-28T14:01:44.999092Z",
     "iopub.status.idle": "2025-03-28T14:01:45.009328Z",
     "shell.execute_reply": "2025-03-28T14:01:45.008176Z"
    },
    "papermill": {
     "duration": 0.016333,
     "end_time": "2025-03-28T14:01:45.011060",
     "exception": false,
     "start_time": "2025-03-28T14:01:44.994727",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,\n",
       "       2014, 2015, 2016, 2017, 2018], dtype=int32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Year'] = df['Date'].dt.year\n",
    "df['Year'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fdb65816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:45.020306Z",
     "iopub.status.busy": "2025-03-28T14:01:45.019844Z",
     "iopub.status.idle": "2025-03-28T14:01:45.026500Z",
     "shell.execute_reply": "2025-03-28T14:01:45.025348Z"
    },
    "papermill": {
     "duration": 0.013252,
     "end_time": "2025-03-28T14:01:45.028201",
     "exception": false,
     "start_time": "2025-03-28T14:01:45.014949",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Dataset contains data from Date 2003 to 2018\n",
      "The price Range between for the above data is 74.21 to 189.51 \n"
     ]
    }
   ],
   "source": [
    "max_date = df['Year'].max()\n",
    "min_date = df['Year'].min()\n",
    "max_price = df['Petrol (USD)'].max()\n",
    "min_price = df['Petrol (USD)'].min()\n",
    "print(f'The Dataset contains data from Date {min_date} to {max_date}')\n",
    "print(f'The price Range between for the above data is {min_price} to {max_price} ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2780a0c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-28T14:01:45.037624Z",
     "iopub.status.busy": "2025-03-28T14:01:45.037148Z",
     "iopub.status.idle": "2025-03-28T14:01:45.348471Z",
     "shell.execute_reply": "2025-03-28T14:01:45.347074Z"
    },
    "papermill": {
     "duration": 0.318264,
     "end_time": "2025-03-28T14:01:45.350343",
     "exception": false,
     "start_time": "2025-03-28T14:01:45.032079",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(df['Year'],df['Petrol (USD)'],marker = 'o',color = 'b')\n",
    "plt.title(\"Price trend over Years\")\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Price (USD)\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 1509434,
     "sourceId": 22441,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30918,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.397751,
   "end_time": "2025-03-28T14:01:46.077773",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-28T14:01:38.680022",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
