{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":22441,"databundleVersionId":1509434,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.381673Z","iopub.execute_input":"2025-03-28T13:46:09.382042Z","iopub.status.idle":"2025-03-28T13:46:09.386708Z","shell.execute_reply.started":"2025-03-28T13:46:09.382014Z","shell.execute_reply":"2025-03-28T13:46:09.385381Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/petrol-price-forecasting/train_data.csv\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.390868Z","iopub.execute_input":"2025-03-28T13:46:09.391234Z","iopub.status.idle":"2025-03-28T13:46:09.415899Z","shell.execute_reply.started":"2025-03-28T13:46:09.391206Z","shell.execute_reply":"2025-03-28T13:46:09.414800Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"        Date  Petrol (USD)\n0   6/9/2003         74.59\n1  6/16/2003         74.47\n2  6/23/2003         74.42\n3  6/30/2003         74.35\n4   7/7/2003         74.28","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Petrol (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6/9/2003</td>\n      <td>74.59</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6/16/2003</td>\n      <td>74.47</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6/23/2003</td>\n      <td>74.42</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6/30/2003</td>\n      <td>74.35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/7/2003</td>\n      <td>74.28</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.417082Z","iopub.execute_input":"2025-03-28T13:46:09.417546Z","iopub.status.idle":"2025-03-28T13:46:09.428424Z","shell.execute_reply.started":"2025-03-28T13:46:09.417503Z","shell.execute_reply":"2025-03-28T13:46:09.427024Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 813 entries, 0 to 812\nData columns (total 2 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   Date          813 non-null    object \n 1   Petrol (USD)  811 non-null    float64\ndtypes: float64(1), object(1)\nmemory usage: 12.8+ KB\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.430012Z","iopub.execute_input":"2025-03-28T13:46:09.430380Z","iopub.status.idle":"2025-03-28T13:46:09.455841Z","shell.execute_reply.started":"2025-03-28T13:46:09.430351Z","shell.execute_reply":"2025-03-28T13:46:09.454874Z"}},"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"       Petrol (USD)\ncount    811.000000\nmean     110.330481\nstd       19.241182\nmin       74.210000\n25%       94.525000\n50%      112.420000\n75%      128.560000\nmax      189.510000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Petrol (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>811.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>110.330481</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>19.241182</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>74.210000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>94.525000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>112.420000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>128.560000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>189.510000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":"null_values = df.isnull().sum()\nnull_values","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.457216Z","iopub.execute_input":"2025-03-28T13:46:09.457525Z","iopub.status.idle":"2025-03-28T13:46:09.476061Z","shell.execute_reply.started":"2025-03-28T13:46:09.457497Z","shell.execute_reply":"2025-03-28T13:46:09.474766Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"Date            0\nPetrol (USD)    2\ndtype: int64"},"metadata":{}}],"execution_count":32},{"cell_type":"code","source":"df.dropna(inplace = True)\ndf.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:48:20.181366Z","iopub.execute_input":"2025-03-28T13:48:20.181803Z","iopub.status.idle":"2025-03-28T13:48:20.192090Z","shell.execute_reply.started":"2025-03-28T13:48:20.181769Z","shell.execute_reply":"2025-03-28T13:48:20.190712Z"}},"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"Date            0\nPetrol (USD)    0\nYear            0\ndtype: int64"},"metadata":{}}],"execution_count":41},{"cell_type":"code","source":"max_date = df['Date'].max()\nmin_date = df['Date'].min()\nmax_price = df['Petrol (USD)'].max()\nmin_price = df['Petrol (USD)'].min()\nprint(f'The Dataset contains data from Date {min_date} to {max_date}')\nprint(f'The price Range between for the above data is {min_price} to {max_price} ')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.499943Z","iopub.execute_input":"2025-03-28T13:46:09.500294Z","iopub.status.idle":"2025-03-28T13:46:09.517730Z","shell.execute_reply.started":"2025-03-28T13:46:09.500265Z","shell.execute_reply":"2025-03-28T13:46:09.516663Z"}},"outputs":[{"name":"stdout","text":"The Dataset contains data from Date 1/1/2007 to 9/9/2013\nThe price Range between for the above data is 74.21 to 189.51 \n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"df['Date'] = pd.to_datetime(df['Date'])\ndf.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.519046Z","iopub.execute_input":"2025-03-28T13:46:09.519381Z","iopub.status.idle":"2025-03-28T13:46:09.545771Z","shell.execute_reply.started":"2025-03-28T13:46:09.519348Z","shell.execute_reply":"2025-03-28T13:46:09.544675Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 811 entries, 0 to 812\nData columns (total 2 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   Date          811 non-null    datetime64[ns]\n 1   Petrol (USD)  811 non-null    float64       \ndtypes: datetime64[ns](1), float64(1)\nmemory usage: 19.0 KB\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"df['Year'] = df['Date'].dt.year","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:46:09.546739Z","iopub.execute_input":"2025-03-28T13:46:09.547091Z","iopub.status.idle":"2025-03-28T13:46:09.564434Z","shell.execute_reply.started":"2025-03-28T13:46:09.547064Z","shell.execute_reply":"2025-03-28T13:46:09.563170Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"plt.plot(df['Year'],df['Petrol (USD)'])\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-28T13:48:59.531923Z","iopub.execute_input":"2025-03-28T13:48:59.532347Z","iopub.status.idle":"2025-03-28T13:48:59.694736Z","shell.execute_reply.started":"2025-03-28T13:48:59.532314Z","shell.execute_reply":"2025-03-28T13:48:59.693646Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":43}]}