{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":22441,"databundleVersionId":1509434,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T16:42:09.995061Z","iopub.execute_input":"2025-03-14T16:42:09.995357Z","iopub.status.idle":"2025-03-14T16:42:11.565496Z","shell.execute_reply.started":"2025-03-14T16:42:09.995333Z","shell.execute_reply":"2025-03-14T16:42:11.564382Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/petrol-price-forecasting/train_data.csv\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T16:43:45.415931Z","iopub.execute_input":"2025-03-14T16:43:45.416327Z","iopub.status.idle":"2025-03-14T16:43:45.457658Z","shell.execute_reply.started":"2025-03-14T16:43:45.416298Z","shell.execute_reply":"2025-03-14T16:43:45.456705Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"        Date  Petrol (USD)\n0   6/9/2003         74.59\n1  6/16/2003         74.47\n2  6/23/2003         74.42\n3  6/30/2003         74.35\n4   7/7/2003         74.28","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Petrol (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6/9/2003</td>\n      <td>74.59</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6/16/2003</td>\n      <td>74.47</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6/23/2003</td>\n      <td>74.42</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6/30/2003</td>\n      <td>74.35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7/7/2003</td>\n      <td>74.28</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T16:46:05.661714Z","iopub.execute_input":"2025-03-14T16:46:05.662066Z","iopub.status.idle":"2025-03-14T16:46:05.701915Z","shell.execute_reply.started":"2025-03-14T16:46:05.662031Z","shell.execute_reply":"2025-03-14T16:46:05.700853Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 813 entries, 0 to 812\nData columns (total 2 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   Date          813 non-null    object \n 1   Petrol (USD)  811 non-null    float64\ndtypes: float64(1), object(1)\nmemory usage: 12.8+ KB\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-14T16:46:08.788717Z","iopub.execute_input":"2025-03-14T16:46:08.789075Z","iopub.status.idle":"2025-03-14T16:46:08.805737Z","shell.execute_reply.started":"2025-03-14T16:46:08.789048Z","shell.execute_reply":"2025-03-14T16:46:08.804583Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"       Petrol (USD)\ncount    811.000000\nmean     110.330481\nstd       19.241182\nmin       74.210000\n25%       94.525000\n50%      112.420000\n75%      128.560000\nmax      189.510000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Petrol (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>811.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>110.330481</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>19.241182</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>74.210000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>94.525000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>112.420000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>128.560000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>189.510000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":7}]}